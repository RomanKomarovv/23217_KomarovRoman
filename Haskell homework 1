even' :: Int -> Bool
even' n = if mod n 2 == 0 then True else False

odd' :: Int -> Bool
odd' n = if mod n 2 == 1 then True else False

computeFibb :: Int -> Int
computeFibb 1 = 1
computeFibb 2 = 1
computeFibb n | n > 0 = computeFibb(n - 1) + computeFibb(n - 2)
              | otherwise = error "ahah"

sumOddFibb :: Int -> Int
sumOddFibb 1 = 1
sumOddFibb n  | odd'(computeFibb n) = sumOddFibb(n - 1) + computeFibb n
              | otherwise = sumOddFibb(n - 1)


magicNumber :: Int -> Int
magicNumber 0 = 0
magicNumber n | mod n 9 == 0 = 9 
              | otherwise = mod n 9
