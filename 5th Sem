----------- 1 -----------
mapL' :: (a -> b) -> [a] -> [b]
mapL' f = foldl (\acc x -> acc ++ [f x]) []

mapR' :: (a -> b) -> [a] -> [b]
mapR' f = foldr (\x acc -> f x : acc) []

----------- 2 -----------
nub' :: Eq a => [a] -> [a]
nub' [] = [] 
nub' (x:xs) = [x] ++ nub' (filter (/= x) xs)

union' :: Eq a => [a] -> [a] -> [a]
union' xs ys = nub' (xs ++ ys)

intersection' :: Eq a => [a] -> [a] -> [a] 
intersection' xs ys = foldl (\res x -> res ++ (if (elem x ys) then [x] else [])) [] xs

----------- 3 -----------
computeVector :: String -> Double -> Double
computeVector command res | command == "inc" = res + 1
                  | command == "dec" = res - 1
                  | command == "sqrt" = sqrt res
                  | command == "double" = res * 2
                  | command == "halveIfPositive" = if (res > 0) then res / 2 else res
                  | otherwise = error "Foo"

----------- 4 -----------
type Command = String

allCommands = ["inc", "dec", "double", "sqrt", "halveIfPositive"]

usefulCommand :: Command -> Bool
usefulCommand "inc" = True
usefulCommand "dec" = True
usefulCommand "double" = True
usefulCommand "sqrt" = True
usefulCommand "halveIfPositive" = True
usefulCommand _ = False

cleaner :: [Command] -> [Command]
cleaner commands = filter usefulCommand commands

----------- 5 -----------


----------- 6 -----------
