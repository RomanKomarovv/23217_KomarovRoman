---------- 1 -----------
fib :: Int -> Int
fib 1 = 1
fib 2 = 1
fib x = fib (x - 1) + fib (x - 2)

fibMod5 = [fib(x) | x <- [1..], mod fib(x) 5 == 0]


---------- 2 -----------
perimeter :: [(Double, Double)] -> Double
perimeter [] = 0
perimeter [(x1, y1), (x2, y2), (x3, y3)] = sqrt ((x1 - x2)^2 + (y1 - y2)^2) + sqrt ((x2 - x3)^2 + (y2 - y3)^2) + sqrt ((x3 - x1)^2 + (y3 - y1)^2)

---------- 3 -----------
checkAllEq :: Eq a => [a] -> Bool
checkAllEq [] = True
checkAllEq [_] = True
checkAllEq (x:y:xs) | x == y = checkAllEq(x:xs)
                    | otherwise = False

---------- 4 -----------
-- foof :: [(Double, Double)] -> Double
-- foof [] = 0
-- foof [(x1, y1), (x2, y2)] = sqrt((x1 - x2)^2 + (y1 - y2)^2)

-- shortest :: [Double] -> Double
-- shortest [] = 0


---------- 5 -----------
compute :: [String] -> Double -> Double
compute[] p = p
compute (x:xs) p  | x == "inc" = compute (xs)(p + 1)
                  | x == "dec" = compute (xs)(p - 1)
                  | x == "double" = compute (xs)(p * 2)
                  | x == "sqrt" = compute (xs)(sqrt(p))
                  | x == "halveIfPositive" && p > 0 = compute (xs)(p / 2)
                  | otherwise = compute (xs)(p)  
