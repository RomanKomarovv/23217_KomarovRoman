import System.Environment
import Data.Char

alphabet :: String
alphabet = ['a'..'z'] ++ ['A'..'Z'] ++ ['0'..'9']

charShift :: Char -> Char -> Char
charShift key x
  | x `elem` alphabet =
    let base = if isLower x then 'a' else 'A'
        offset = ord x - ord base
        keyOffset = ord (toLower key) - ord 'a'
        newOffset = (offset + keyOffset) `mod` 36
    in chr (ord base + newOffset)
  | otherwise = x

encryptVigenere :: String -> String -> String
encryptVigenere key text = zipWith charShift (cycle key) text

decryptVigenere :: String -> String -> String
decryptVigenere key text = zipWith charShift (cycle (map toLower key)) text

processFile :: String -> String -> FilePath -> IO ()
processFile mode key filePath = do
  content <- readFile filePath
  let result = case mode of
        "e" -> encryptVigenere (map toLower key) content
        "d" -> decryptVigenere (map toLower key) content
        _   -> error "You have used uncorrect mode. Use mode 'e' (encrypt) or 'd' (decrypt)"
  putStrLn result

main :: IO ()
main = do
  args <- getArgs
  case args of
    [mode, key, filePath] -> processFile mode key filePath
    _ -> putStrLn "Error. You have used The Vigener Cipher uncorrectly"
