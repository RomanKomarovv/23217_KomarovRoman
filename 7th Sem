import Data.Array
newtype Matrix = Matrix (Array (Int, Int) Double)


--- 1 ---
example1 :: [((Int, Int), Double)]
example1 = [((0,0), 1), ((0,1), -2), ((0,2), 3), ((1,0), 4), ((1,1), 0), ((1,2), 6), ((2,0), -7), ((2,1), 8), ((2,2), 9)]
example2 :: [((Int, Int), Double)]
example2 = [((0,0), 13), ((0,1), 0), ((1,0), 0 ), ((1,1), 12)]
-- m1 = makeMatrix (3, 3) example1 
-- m2 = makeMatrix (2, 2) example2 

makeMatrix :: (Int, Int) -> [((Int, Int), Double)] -> Matrix
makeMatrix (x, y) elemsOfMatrix = Matrix (array ((0, 0),  (x - 1, y - 1)) elemsOfMatrix)
m1 = makeMatrix (3, 3) example1
m2 = makeMatrix (2, 2) example2

(!!!) :: Matrix -> (Int, Int) -> Double
(Matrix elemsOfMatrix) !!! (x1, y1) = elemsOfMatrix ! (x1, y1)

matrixSize :: Matrix -> (Int, Int)
matrixSize (Matrix elemsOfMatrix) = (\((x1, y1), (x2, y2)) -> (x2 + 1, y2 + 1)) (bounds elemsOfMatrix)

matrixIndices :: Matrix -> [(Int, Int)]
matrixIndices (Matrix elemsOfMatrix) = indices elemsOfMatrix

--- 2 ---
type MtxElem = ((Int, Int), Double)
matrixFold :: (b -> MtxElem -> b) -> b -> Matrix -> b
matrixFold f acc (Matrix elems) = foldl (f) acc (assocs elems)
matrixSumElems :: Matrix -> Double
matrixSumElems mtx = matrixFold (\acc (_, e) -> acc + e) 0 mtx

matrixMap :: (MtxElem -> Double) -> Matrix -> Matrix
matrixMap f matrix = makeMatrix (matrixSize matrix) (matrixFold (\acc x -> ((fst x), (f x)) : acc) [] matrix)
matrixMulScalar x mtx = matrixMap (\(_, e) -> x * e) mtx

--- 3 ---
instance Show Matrix where
        show :: Matrix -> String
        show mtx = matrixFold (\acc x -> if snd (fst x) == (fst (matrixSize mtx) - 1) then acc ++ show (snd x) ++ "\n" else acc ++ show (snd x) ++ " ") "" mtx

--- 4 ---
transpose :: Matrix -> Matrix
transpose mtx = matrixMap (\((x, y), value) -> mtx !!! (y, x)) mtx

--- 5 ---
instance Eq Matrix where
        (==) :: Matrix -> Matrix -> Bool
        (==) (Matrix mtx1) (Matrix mtx2) = mtx1 == mtx2

--- 6 ---
instance Num Matrix where
        (+) :: Matrix -> Matrix -> Matrix
        (+) mtx1 mtx2   | matrixSize mtx1 /= matrixSize mtx2 = error "ERROR"
                        | otherwise = matrixMap (\(id, value) -> value + mtx2 !!! id) mtx1
        (*) = undefined  -- Не знаю, как реализовать умножение--

        negate :: Matrix -> Matrix
        negate = matrixMap (\(id, value) -> -value)

        abs :: Matrix -> Matrix
        abs = matrixMap (\(id, value) -> abs value)

        signum :: Matrix -> Matrix
        signum = matrixMap (\(id, value) -> if value > 0 then 1 else if value < 0 then (-1) else 0)

        fromInteger = undefined
--- 7 ---
det2 :: Matrix -> Double
det2 mtx = mtx !!! (0, 0) * mtx !!! (1, 1) - mtx !!! (1, 0) * mtx !!! (0, 1)

det3 :: Matrix -> Double
det3 mtx = mtx !!! (0, 0) * mtx !!! (1, 1) * mtx !!! (2, 2) +
           mtx !!! (0, 1) * mtx !!! (1, 2) * mtx !!! (2, 0) -
           mtx !!! (0, 2) * mtx !!! (1, 1) * mtx !!! (2, 0) -
           mtx !!! (0, 1) * mtx !!! (1, 0) * mtx !!! (2, 2) -
           mtx !!! (0, 0) * mtx !!! (1, 2) * mtx !!! (2, 1)

--- 8 ---
isDiagonal :: Matrix -> Bool
isDiagonal = matrixFold (\acc ((x, y), value) -> if (x /= y && value /= 0) then False else acc) True

isSymmetrical :: Matrix -> Bool
isSymmetrical mtx = if mtx == transpose mtx then True else False
